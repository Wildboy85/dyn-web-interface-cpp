// ConsoleApplication1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdio.h"
#include "windows.h"
#include <string>
#include <malloc.h>
#include <iostream>

#import "shdocvw.dll" 

using std::cout;
using std::wcout;

int _tmain(int argc, _TCHAR* argv[])
{
	// IE 9.0.8112.16421: IEXPLORE.EXE
	// Chrome 21.0.1180.60 m : Google Chrome
	// Firefox 10.0.2 : FIREFOX.EXE
	// Safari 3.2.2 : Safari.exe
	// Opera 12.01 : Opera
	
	// modified from http://www.codeproject.com/internet/urlnewwindow.asp

	std::string page;
	std::wstring wstrBrowser01;
	std::string str01;

	HKEY hKey = NULL;
	
	if (RegOpenKeyEx(HKEY_CLASSES_ROOT, TEXT("http\\shell\\open\\command"), 0, KEY_READ, &hKey) == ERROR_SUCCESS)
	{
		DWORD cbData = 0;
		if (RegQueryValueEx(hKey, NULL, NULL, NULL, NULL, &cbData) == ERROR_SUCCESS && cbData > 0)
		{
			// command key is present
			TCHAR* browsername01 = new TCHAR[cbData];
			
			if (browsername01 != NULL)
			{
				
			    if (RegQueryValueEx(hKey, NULL, NULL, NULL, (LPBYTE)browsername01, &cbData) == ERROR_SUCCESS)
				//if (RegQueryValueEx(hKey, NULL, NULL, NULL, reinterpret_cast<LPBYTE>(&browsername01[0]), &cbData) == ERROR_SUCCESS)
				{
					
					wstrBrowser01 = browsername01;
					// wcout << wstrBrowser01;
				}
				delete[] browsername01;
			}
		}
		RegCloseKey(hKey);
	}
	else
	{
		printf("\r\nERROR could not read regkey");
	}


	if (wstrBrowser01.length() > 0)
	{
		std::string::size_type nStart = wstrBrowser01.find('"', 0);

		// if first is a quote, then exe path is in quotes, so find the second quote
		if (nStart == 0)
		{
			std::string::size_type nEnd = wstrBrowser01.find('"', 1);
			if (nStart != nEnd && nEnd != std::string::npos)
			{
				wstrBrowser01 = wstrBrowser01.substr(nStart + 1, nEnd - nStart - 1);
			}
		}
		// otherwise if no quotes, 2nd point is the first space after the last backslash
		else
		{
			std::string::size_type nIndex = wstrBrowser01.rfind('\\', wstrBrowser01.length() - 1);
			if (nIndex != std::string::npos)
			{
				std::string::size_type nSpace = wstrBrowser01.find(' ', nIndex);
				if (nSpace != std::string::npos)
				{
					wstrBrowser01 = wstrBrowser01.substr(0, nSpace);
				}
			}
		}

		std::wstring wcommand01 = L"\"";
		wcommand01 += wstrBrowser01;
		wcommand01 += L"\" \"";
		wcommand01 += L"www.google.ca";
		wcommand01 += L"\"";
		
		std::string command01(wcommand01.begin(), wcommand01.end());

		cout << command01;
		// HINSTANCE hinst01 = ShellExecuteW(NULL, L"open", LPCWSTR(wcommand01.c_str()), NULL, NULL, SW_HIDE);
		HINSTANCE hinst01 = ShellExecuteA(NULL, "open", LPCSTR(command01.c_str()), NULL, NULL, SW_SHOW);
		
	}
	else
	{
		printf("\r\n\r\nERROR strBrowser01.length is 0");
	}
	printf("\r\nFIN");
	// printf(command.c_str());

	for (size_t i = 0; i < 2000000000; i++)
	{

	}
	return 0;
	
}

